import { createReducer, on } from "@ngrx/store";
import { authState } from "./auth.state";
import {  adminLogin, adminLoginFailure, adminLoginSucess, adminLogout, adminLogoutsucess, loginFailure, loginSuccess, navigateAdminHomePage, otpVerification, otpVerificationFailure, otpVerificationSuccess, signup, signupFailure, signupSucess, userLogout, userlogin } from "./auth.actions";

    export const authReducer = createReducer(authState,
        on(signup,(state,action)=>{
            return{
                ...state
            }
        }),
        on(signupSucess,(state)=>{
            return{
                ...state
            }
        }),
        on(signupFailure,(state,action)=>{
            return{
                ...state,
                signupError:action.error
            }
        }),
        on(otpVerificationFailure,(state,action)=>{
            return {
                ...state,
                otpVerficationError:action.error
            }
        }),
        on(otpVerificationSuccess,(state,action)=>{
            return{
                ...state,
                firstname:action.payload.firstname,
                lastname:action.payload.lastname,
                email:action.payload.email,
                mobile:action.payload.mobile,
                gender:action.payload.gender,
                isLoggedIn:true,
            }
        }),
        on(userlogin,(state,action)=>{
            return{
                ...state,
            }
        }),
        on(loginSuccess,(state,action)=>{
            return{
                ...state,
                firstname:action.payload.firstname,
                lastname:action.payload.lastname,
                email:action.payload.email,
                mobile:action.payload.mobile,
                gender:action.payload.gender,
                token:action.payload.token,
                isLoggedIn:true
            }
        }),
        on(loginFailure,(state,action)=>{
            return{
                ...state,
                loginError:action.error
            }
        }),
        on(userLogout,(state,action)=>{
            return{
                ...state,
                firstname:'',
                lastname:'',
                email:'',
                mobile:'',
                gender:'',
                token:'',
                isLoggedIn:false
            }
        })
        ,
        on(adminLogin,(state,action)=>{
            return{
                ...state,
            }
        }),
        on(adminLoginSucess,(state,action)=>{
            return{
                ...state,
                Admin:action.payload.admin,
                admin:true,
                adminLoginError:''
            }
        }),
        on(adminLoginFailure,(state,action)=>{
            return{
                ...state,
                adminLoginError:action.error,
                admin:false
                
            }
        }),
        on(navigateAdminHomePage,(state,action)=>{
            return{
                ...state
            }
        }),
        on(adminLogout,(state,action)=>{
            return{
                ...state,
                admin:false
            }
        }),
        on(adminLogoutsucess,(state,action)=>{
            return{
                ...state
            }
        })
    )